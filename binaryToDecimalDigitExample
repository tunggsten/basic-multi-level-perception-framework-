from network import *


        
startTime = time.time()
testNetwork = generate_network_from_model("testNetwork.model")
print(f"Loaded model in {time.time() - startTime} seconds.")



# This dataset is three digits of binary as the input, and the decimal digit they correspond to as the output.
trainingInputs = [[0, 0, 0],
                  [0, 0, 1],
                  [0, 1, 0],
                  [0, 1, 1],
                  [1, 0, 0],
                  [1, 0, 1],
                  [1, 1, 0],
                  [1, 1, 1]]

trainingOutputs = [[1, 0, 0, 0, 0, 0, 0, 0],
                   [0, 1, 0, 0, 0, 0, 0, 0],
                   [0, 0, 1, 0, 0, 0, 0, 0],
                   [0, 0, 0, 1, 0, 0, 0, 0],
                   [0, 0, 0, 0, 1, 0, 0, 0],
                   [0, 0, 0, 0, 0, 1, 0, 0],
                   [0, 0, 0, 0, 0, 0, 1, 0],
                   [0, 0, 0, 0, 0, 0, 0, 1]]



print("Starting training cycles... \n\n\n")

for i in range(50000):
    #print(f"--- STARTING TRAINING CYCLE {i + 1}")
    startTime = time.time()
    testNetwork.train(trainingInputs, trainingOutputs, 0.05)
    #print(f"Finished training cycle in {time.time() - startTime} seconds.")

for i in range(8):
        print(f"Testing for input {trainingInputs[i]}")
        testNetwork.generate_output(trainingInputs[i])
        print(f"Output is {testNetwork.get_output()}")
        print(f"Loss is {testNetwork.get_ssr([0, 0, 1, 0, 0, 0, 0, 0])}\n")

testNetwork.save_model_to_file("testNetwork.model")